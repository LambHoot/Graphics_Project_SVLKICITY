#version 130

uniform int drawType;
uniform vec3 camPos;

in vec3 out_Color;
in float distance;
in  vec3 in_Position;		//vertex position?
out vec4 frag_Color;	//final output color used to render the point

void main () {
	frag_Color = vec4 (out_Color, 1.0);
	vec3 fogColor = vec3 (0.0f, 0.0f, 0.0f);

	if(drawType == 0){//building
		//fog in fragshader
		float f = (1.0f-((100.0f - distance)/100.0f));
		float ourColorR = (f*fogColor.x) + (1.0f-f)*out_Color.x;
		float ourColorG = (f*fogColor.y) + (1.0f-f)*out_Color.y;
		float ourColorB = (f*fogColor.z) + (1.0f-f)*out_Color.z;
		vec3 wow = vec3 (ourColorR, ourColorG, ourColorB);
		frag_Color = vec4 (wow, 1.0);
	}

	else if(drawType == 2){//world plane
		//fog in fragshader
		float f = (1.0f-((100.0f - distance)/100.0f));
		float ourColorR = (f*fogColor.x) + (1.0f-f)*out_Color.x;
		float ourColorG = (f*fogColor.y) + (1.0f-f)*out_Color.y;
		float ourColorB = (f*fogColor.z) + (1.0f-f)*out_Color.z;
		vec3 wow = vec3 (ourColorR, ourColorG, ourColorB);
		frag_Color = vec4 (wow, 1.0);
	}

	else if(drawType == 3){//streets
		//fog in fragshader
		float f = (1.0f-((100.0f - distance)/100.0f));
		float ourColorR = (f*fogColor.x) + (1.0f-f)*out_Color.x;
		float ourColorG = (f*fogColor.y) + (1.0f-f)*out_Color.y;
		float ourColorB = (f*fogColor.z) + (1.0f-f)*out_Color.z;
		vec3 wow = vec3 (ourColorR, ourColorG, ourColorB);
		frag_Color = vec4 (wow, 1.0);
	}
	else{
		frag_Color = vec4 (out_Color, 1.0);
	}
}